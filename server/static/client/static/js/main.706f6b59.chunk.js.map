{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["controlEndpoint","Tweet","_ref","content","date","react_default","a","createElement","className","Hero","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","submit","newInputRef","value","fetch","method","headers","Content-Type","body","JSON","stringify","then","res","ok","json","Error","concat","status","statusText","tweet","setState","_ref2","tweets","toConsumableArray","catch","console","error","state","React","createRef","_this2","time","Date","b","getMonth","getDate","getFullYear","_this3","onSubmit","e","preventDefault","placeholder","type","ref","map","_ref4","id","App_Tweet","key","convertTime","Component","Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.706f6b59.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nconst controlEndpoint = \"http://localhost:4000/api/tweets/\"\n\nconst Tweet = ({ content, date }) => (\n    <article className=\"tweets-item\">\n        <span className=\"tweets-item-date\">{ date }</span>\n        <p className=\"tweets-item-content\">\n            { content }\n        </p>\n    </article>\n);\n\nclass Hero extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            tweets: false\n        }\n\n        this.newInputRef = React.createRef();\n    }\n\n    componentDidMount() {\n        fetch(controlEndpoint, {\n            method: \"GET\"\n        }).then((res) => {\n            if(res.ok) {\n                return res.json();\n            } else {\n                throw new Error(`ERROR ${ res.status } (${ res.statusText })`);\n            }\n        }).then((res) => {\n            this.setState(() => ({\n                tweets: res\n            }))\n        }).catch(console.error);\n    }\n\n    convertTime(time) { // 23 June, 2018\n        let a = new Date(time),\n            b = [\n                \"Jan\",\n                \"Feb\",\n                \"March\",\n                \"Apr\",\n                \"May\",\n                \"Jun\",\n                \"Jul\",\n                \"Aug\",\n                \"Sep\",\n                \"Oct\",\n                \"Nov\",\n                \"Dec\"\n            ][ a.getMonth() ]\n\n        return `${ a.getDate() } ${ b }, ${ a.getFullYear() }`\n    }\n\n    submit = () => {\n        let content = this.newInputRef.value;\n\n        fetch(controlEndpoint, {\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ content })\n        }).then((res) => {\n            if(res.ok) {\n                return res.json();\n            } else {\n                throw new Error(`ERROR ${ res.status } (${ res.statusText })`);\n            }\n        }).then((tweet) => {\n            this.setState(({ tweets }) => ({\n                tweets: [\n                    tweet,\n                    ...tweets\n                ]\n            }));\n        }).catch(console.error);\n\n        this.newInputRef.value = \"\";\n    }\n\n    render() {\n        return(\n            <div className=\"tweets\">\n                <form className=\"tweets-submit\" onSubmit={ e => { e.preventDefault(); this.submit(); } }>\n                    <input\n                        placeholder=\"Tweet\"\n                        type=\"text\"\n                        ref={ ref => this.newInputRef = ref }\n                    />\n                    <button type=\"submit\">Submit</button>\n                </form>\n                {\n                    (this.state.tweets) ? (\n                        this.state.tweets.map(({ id, date, content }) => (\n                            <Tweet\n                                key={ id }\n                                date={ this.convertTime(date) }\n                                content={ content }\n                            />\n                        ))\n                    ) : (\n                        <div className=\"tweets-loading\" />\n                    )\n                }\n            </div>\n        );\n    }\n}\n\nexport default Hero;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}